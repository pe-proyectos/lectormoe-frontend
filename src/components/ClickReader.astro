---
interface Props {
    currentPageNumber: number;
    manga: any;
    chapter: any;
    pages: any[];
}

const { chapter, pages, currentPageNumber } = Astro.props;
---

<div id="viewer" class="relative h-full w-full flex items-center justify-center" data-current-page-number={currentPageNumber}>
    <div
        class={
            "notfound-page w-full min-h-96 bg-black bg-opacity-50 flex items-center justify-center"
            + (pages.find((page: any) => page.number == currentPageNumber) ? " hidden" : "")
        }>
        <h1>Página no encontrada</h1>
    </div>
    {
        pages.map((page: any) => (
            <img
                src={page.imageUrl}
                alt={`Página ${page.number}`}
                id={`page-${page.number}`}
                data-number={page.number}
                decoding="async"
                loading="lazy"
                draggable="false"
                class={
                    "manga-page min-h-36 w-full max-w-[900px] skeleton"
                    + " rounded-none"
                    + (page.number == currentPageNumber ? " active-page" : " hidden")
                }
            />
        ))
    }
    <div class="absolute left-0 w-1/2 h-full cursor-pointer"
        id="next-page-click" />
    <div class="absolute right-0 w-1/2 h-full cursor-pointer"
        id="previous-page-click" />
</div>

<script>
    function goToNextChapter(previous: boolean) {
        let goToNextElement = false;
        const chapters = [...document.querySelectorAll('[data-chapter-number]')]
            .map(elem => ({
                // @ts-ignore
                chapterNumber: parseFloat(elem.dataset.chapterNumber),
                // @ts-ignore
                isCurrentChapter: elem.dataset.isCurrentChapter === "true",
            }))
            .filter((elem, index, self) => {
                return self.findIndex(e => e.chapterNumber === elem.chapterNumber) === index;
            })
            .sort((a, b) => {
                const aNumber = a.chapterNumber;
                const bNumber = b.chapterNumber;
                if (previous) {
                    return bNumber - aNumber;
                }
                return aNumber - bNumber;
            });
        for (const chapter of chapters) {
            if (goToNextElement) {
                const selectedChapterHref = document.querySelector(`.chapter-href[data-chapter-number="${chapter.chapterNumber}"]`) as HTMLAnchorElement;
                selectedChapterHref?.click();
                return;
            }
            goToNextElement = chapter.isCurrentChapter;
        }
        if (!previous) {
            const modal_last_chapter = document.getElementById('modal_last_chapter') as HTMLDialogElement;
            modal_last_chapter.open = true;
        }
    }
    function setPage(pageNumber: number, pushState = false) {
        if (pageNumber < 1) {
            return goToNextChapter(true);
        }
        const page = document.querySelector(`img[data-number="${pageNumber}"]`);
        if (!page) {
            return goToNextChapter(false);
        }
        document.querySelectorAll('.manga-page').forEach(page => {
            page.classList.add('hidden');
            page.classList.remove('active-page');
        });
        document.querySelectorAll('.notfound-page').forEach(page => {
            page.classList.add('hidden');
        });
        page.classList.remove('hidden');
        page.classList.add('active-page');
        if (pushState) {
            var queryParams = new URLSearchParams(window.location.search);
            queryParams.set("page", pageNumber.toString());
            history.pushState(null, "", "?"+queryParams.toString());
        }
        const viewer = document.getElementById('viewer') as HTMLElement;
        viewer.dataset.currentPageNumber = pageNumber.toString();
        document.querySelectorAll(".page-select")
            .forEach(elem => {
                const pageSelect = elem as HTMLSelectElement;
                if (pageSelect.value != pageNumber.toString()) {
                    pageSelect.value = pageNumber.toString();
                }
            });
        window.scrollTo({top: 64, behavior: 'smooth'});
    }
    function load() {
        document.getElementById('next-page-click')?.addEventListener('click', () => {
            const currentPageNumber = parseInt(document.getElementById('viewer')?.dataset.currentPageNumber || "1");
            setPage(currentPageNumber + 1, true);
        });
        document.getElementById('previous-page-click')?.addEventListener('click', () => {
            const currentPageNumber = parseInt(document.getElementById('viewer')?.dataset.currentPageNumber || "1");
            setPage(currentPageNumber - 1, true);
        });
        window.addEventListener('popstate', event => {
            const urlSearchParams = new URLSearchParams(window.location.search);
            const currentPageNumber = parseInt(urlSearchParams.get("page") || "1");
            setPage(currentPageNumber, false);
        });
        document.querySelectorAll(".page-select")
            .forEach(elem => {
                const pageSelect = elem as HTMLSelectElement;
                pageSelect.addEventListener('change', () => {
                    const pageNumber = parseInt(pageSelect.value);
                    setPage(pageNumber, true);
                });
            });
    }
    document.addEventListener('astro:page-load', load, { once: false });
</script>
